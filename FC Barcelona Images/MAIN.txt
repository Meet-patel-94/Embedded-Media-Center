#include "LPC17xx.h"
#include "type.h"
#include "usb.h"
#include "usbcfg.h"
#include "usbhw.h"
#include "usbcore.h"
#include "usbaudio.h"
#include <stdio.h>
#include "cmsis_os.h"
#include "RTL.H"
#include "GLCD.h"
#include "LED.h"
#include "KBD.h"
#include <stdbool.h>
#include "FCBSACHIN320.c"
#include "FCBSACHI320.c"

//#include "FCBSquad.c"
//#include "msn.c"
//#include "FCBarcelona5.c"

#define __FI        1                    /* Font index 16x24                */
#define __USE_LCD   0                                        /* Uncomment to use the LCD                 */

#define MAIN_MENU   0                   /* Font index 16x24                */
#define MYGAME        1   
#define PHOTOGALLERY     2                    /* Font index 16x24                */
#define MUSICPLAYER       3  
extern unsigned char FCBSACHIN320_pixel_data[];
extern unsigned char FCBSACHI320_pixel_data[];
//extern unsigned char FCBSquad_pixel_data[];
//extern unsigned char legends100_pixel_data[];
//extern unsigned char msn_pixel_data[];
//extern int music(void);

int arrow=1;
bool BACK=false;
uint32_t joyDirection;
char text[10];

void delay(int a){
 long k, count=0;
 for (k=0;k<=a;k++){
  count++;
 }
}

void  DisplayMenu(int pointer){ 
    GLCD_SetBackColor(Red);
    GLCD_SetTextColor(White);
    GLCD_DisplayString(0, 0, __FI, "    MEDIA CENTER              ");
    GLCD_SetTextColor(White);
    GLCD_DisplayString(1, 0, __FI, "    MAIN MENU             ");
    GLCD_SetBackColor(Black);
    GLCD_SetTextColor(White);
    GLCD_DisplayString(4, 0, __FI, "  PHOTO GALLERY");
    GLCD_DisplayString(5, 0, __FI, "  MUSIC PLAYER");
    GLCD_DisplayString(6, 0, __FI, "  MY GAME");
   
    switch(pointer) {

   case PHOTOGALLERY:
             GLCD_DisplayString(4, 0, __FI, "->PHOTO GALLERY");
      break;
   case MUSICPLAYER:
             GLCD_DisplayString(5, 0, __FI, "->MUSIC PLAYER");
      break;
     case MYGAME:
              GLCD_DisplayString(6, 0, __FI, "->MY GAME");
      break;
     
   default :
            break;
    }
   
    delay(5000000);

}
int imagenum=0;
void ChangeImage(int x){
    switch(x) {  
   case 0:
    GLCD_Clear(Black);
							GLCD_Bitmap(0,0,320,240, GIMP_IMAGE_PIXEL_DATA);
      break;
      case 1:
              GLCD_Clear(Black);
              GLCD_Bitmap(0,0,320,240, GIMP_IMAGE_FCBSACHIN320_PIXEL_DATA);
     break;
     case 2:
              GLCD_Clear(Black);
              //GLCD_Bitmap(0,0,320,240,(unsigned char*)&GIMP_IMAGE_FCBSQUAD_pixel_data);
     break;
     case 3:
              GLCD_Clear(Black);
              //GLCD_Bitmap(0,0,320,240,(unsigned char*)&GIMP_IMAGE_MSN_pixel_data);
     break;
     case 4:
              GLCD_Clear(Black);
              //GLCD_Bitmap(0,0,320,240,(unsigned char*) &GIMP_IMAGE_MESSI5_pixel_data);
      break;
     default :
     break;
 }   
}

void MusicLoop(){
}
void GalleryLoop(){
    GLCD_Clear(Black); 
    ChangeImage(imagenum);
    while(!BACK){
 joyDirection = get_button();
    switch(joyDirection) {
   case KBD_LEFT:
        // imagenum--;
     if(imagenum<0)
         imagenum=4;
    // ChangeImage(imagenum);
      break;
   case KBD_RIGHT:
         imagenum++;
          if(imagenum>4)
         imagenum=0;
       //ChangeImage(imagenum);
      break;
     case KBD_SELECT:
             BACK=true;
         GLCD_Clear(Black);
    DisplayMenu(arrow);
    break;                     
    default :
    break;
    }
    }
BACK=false;   
}
void SelectMenu(int pointer){
switch(pointer) {
case PHOTOGALLERY:
GalleryLoop();
break;
      case MUSICPLAYER:
      //MusicLoop();
      break;
      //case GAME:
      GLCD_DisplayString(5, 0, __FI, "->MY GAME");
      break;
      default :
      break;
    }  
}
//#define GALLARY     1   
//#define GAME        2                    /* Font index 16x24                */
//#define MUSIC       3   
int main (void) {

    //osTimerId timer_0 = osTimerCreate(osTimer(timer0_handle), osTimerPeriodic, (void *)0);   
    //osTimerId timer_1 = osTimerCreate(osTimer(timer1_handle), osTimerPeriodic, (void *)1);   
    //osTimerId timer_2 = osTimerCreate(osTimer(timer2_handle), osTimerPeriodic, (void *)2);   
		KBD_Init();
    GLCD_Init();   
    LED_Init();
    //osTimerStart(timer_0, 40000);
    //osTimerStart(timer_1, 40000);
    //osTimerStart(timer_2, 20000);
   
    GLCD_Clear(Black);
    DisplayMenu(arrow);
//   music();
while(1){
 joyDirection = get_button();
    switch(joyDirection) {
    case KBD_LEFT:
      break;
     case KBD_RIGHT:
      break;
     case KBD_DOWN:
         arrow++;
     if(arrow > 3)
         arrow = 1;
            DisplayMenu(arrow);
      break;
     case KBD_UP:
        arrow--;
     if(arrow < 1)
         arrow = 3;
             DisplayMenu(arrow);
      break;
     case KBD_SELECT:
 SelectMenu(arrow);
      break;
default :
            break;
    }   
}
}